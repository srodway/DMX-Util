<?xml version="1.0" encoding="UTF-8"?><!--
  Licensed Materials - Property of IBM
 
  Copyright IBM Corporation 2012. All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or disclosure 
  restricted by GSA ADP Schedule Contract with IBM Corp.
--><!--
  Copyright 2010-2011 Curam Software Ltd.
  All rights reserved.

  This software is the confidential and proprietary information of Curam
  Software, Ltd. ("Confidential Information").  You shall not disclose such
  Confidential Information and shall use it only in accordance with the
  terms of the license agreement you entered into with Curam Software.
--><!--
  Interface rule classes for the interaction between the Advisor Engine and
  CER rule sets for calculating Advice. Rule Sets which calculate Advice for
  display in the application must implement these rule classes in order to
  create output which can be displayed as Advice to the user at runtime.

  --><RuleSet xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="CoreAdvisorRuleSet" xsi:noNamespaceSchemaLocation="http://www.curamsoftware.com/CreoleRulesSchema.xsd">


  <!--*********************************************************************-->
  <!--
     An Advice Context rule class. This rule class is designed for
     subclassing by the Advice Rule Set designer.

     Instances of subclasses of this rule set represent the context that any
     Advice produced by this rule set is for. Subclasses should declare any
     parameters that are part of the context as rule attributes. For example,
     if this context is for a person, and was to appear on the person home
     page, then it would sensibly include the concernRoleID as a parameter.
     The rule class for such a context should subclass this rule class
     and create an instance attribute entitled "concernRoleID" of type
     "NumberParameter". The Advisor infrastructure will automatically populate
     this attribute with the value of the concernRoleID for the person.


  -->
  <!--*********************************************************************-->


  <Class abstract="true" name="AbstractAdviceContext">


    <Attribute name="description">
      <type>
        <javaclass name="curam.creole.value.Message"/>
      </type>
      <derivation>
        <ResourceMessage key="CoreAdvisorRuleSet.abstractAdviceContext" resourceBundle="curam.advisor.rules.AdvisorRules">
        </ResourceMessage>
      </derivation>
    </Attribute>


    <!--
      The Advice output by the rule set - This is derived in subclasses to be the
      results of executing the rule set.
    -->
    <Attribute name="advice">
      <type>
        <javaclass name="List">
          <ruleclass name="AbstractAdviceItem"/>
        </javaclass>
      </type>
      <derivation>
        <abstract/>
      </derivation>
    </Attribute>


    <!--
    -->
    <Attribute name="adviceResult">
      <type>
        <javaclass name="curam.advisor.rules.type.impl.AdviceResult">
        </javaclass>
      </type>
      <derivation>
        <call class="curam.advisor.rules.impl.Statics" method="computeAdviceResult">
          <type>
            <javaclass name="curam.advisor.rules.type.impl.AdviceResult"/>
          </type>
          <arguments>
            <reference attribute="advice"/>
          </arguments>
        </call>
      </derivation>
    </Attribute>


  </Class>


  <!--
    This class should be subclassed by all Advice Items which are to be output
    by the CER rule set. A derivation should be provided for the showAdvice and
    adviceText attributes.

    In addition the Advice Text can contain placeholders for links and parameters.
    If adding a placeholder for a parameter in the Advice Text a corresponding
    parameter should be created. The name of the parameter should coincide with
    the name of the placeholder. For example if a placeholder {participant} exists
    then a Parameter with the name participant should exist in the Advice Item

    Equally, if adding a placeholder for a link in the Advice Text, a corresponding
    Link should be created in the Advice Item with the same name as the placeholder.
    For example, if a placeholder for a link {link:application:startApplicationLink}
    exists then a link named startApplicationLink should exist in the Advice Item.

    NB: that the decision to create parameters and links in this way was taken as
    it is much easier to understand in the CER Editor. This evolved from a concept
    where the Links and parameters were stored in lists inside the Advice Item.
    Whilst purer from an object oriented perspective to do it like this, the decision
    was taken to ensure a more comfortable editing experience.

  -->


  <Class abstract="true" name="AbstractAdviceItem">


    <Attribute name="description">
      <type>
        <javaclass name="curam.creole.value.Message"/>
      </type>
      <derivation>
        <ResourceMessage key="CoreAdvisorRuleSet.abstractAdviceItem" resourceBundle="curam.advisor.rules.AdvisorRules">
        </ResourceMessage>
      </derivation>
    </Attribute>


    <!--
      The text to be displayed if this Advice is to be shown. Subclasses
      should add a derivation for this which equates to a key into the
      resource store. The key should be to a message in the format:
      "{participant} is potentially eligible for {program}. Please take an
      {link:application:startApplicationLink}". {participant} and {program}
      are parameters to the message. {link:application:startApplicationLink}
      will be replaced at runtime with the text "application" rendered as a link
     -->
    <Attribute name="adviceText">
      <type>
        <javaclass name="String"/>
      </type>
      <derivation>
        <abstract/>
      </derivation>
    </Attribute>


    <!--
      Concrete subclasses should override the derivation of this attribute to be the
      rules that are used to determine whether this piece of Advice should be shown
      or not. The Advice Engine will store this piece of Advice for later display if
      the value evaluates to true, and ignore it if it evaluates to false.
    -->
    <Attribute name="showAdvice">
      <type>
        <javaclass name="Boolean"/>
      </type>
      <derivation>
        <abstract/>
      </derivation>
    </Attribute>


    <!--
      Concrete subclasses should override the derivation of this attribute to be the
      reference to the adviceContextID attribute which would be in the concrete subclass of
      AbstractAdviceContext. The Advice Engine will then store this piece of Advice
      with the related context.
    -->
    <Attribute name="adviceContext">
      <type>
        <javaclass name="Number"/>
      </type>
      <derivation>
        <specified/>
      </derivation>
    </Attribute>


    <!-- This attribute whill hold the category type of the advice like Issues,
    Tips, Reminders or Outstanding Verifications -->
    <Attribute name="category">
      <type>
        <codetableentry table="AdviceCategory"/>
      </type>
      <derivation>
        <specified/>
      </derivation>
    </Attribute>


    <!-- This attribute will hold the priority of the advice. The priority attribute
         can only contain a value from the set {Critical, High, Medium, Low} -->
    <Attribute name="priority">
      <type>
        <codetableentry table="AdvicePriority"/>
      </type>
      <derivation>
        <specified/>
      </derivation>
    </Attribute>


    <!-- The status of this Advice. This attribute can only contain a value
         from the set {PENDING, COMPLETE} -->
    <Attribute name="status">
      <type>
        <codetableentry table="AdviceStatus"/>
      </type>
      <derivation>
        <specified/>
      </derivation>
    </Attribute>


    <!-- The advice expiry date time. -->
    <Attribute name="expiryDateTime">
      <type>
        <javaclass name="curam.util.type.DateTime"/>
      </type>
      <derivation>
        <null/>
      </derivation>
    </Attribute>


    <!--
      Concrete subclasses should override the derivation of this attribute to the
      case ID that the advice item is related to. The Advice Engine will store
      this information only if the subclass has overridden this attribute.
    -->
    <Attribute name="caseID">
      <type>
        <javaclass name="Number"/>
      </type>
      <derivation>
        <Number value="0"/>
      </derivation>
    </Attribute>


    <!--
      Concrete subclasses should override the derivation of this attribute to the
      evidence type that the advice item is related to. The Advice Engine will store
      this information only if the subclass has overridden this attribute.
    -->
    <Attribute name="evidenceType">
      <type>
        <codetableentry table="EvidenceType"/>
      </type>
      <derivation>
        <Code table="EvidenceType">
          <String value=""/>
        </Code>
      </derivation>
    </Attribute>


    <!--
      Concrete subclasses should override the derivation of this attribute to the
      related ID that the advice item is related to. The Advice Engine will store
      this information only if the subclass has overridden this attribute.
    -->
    <Attribute name="relatedID">
      <type>
        <javaclass name="Number"/>
      </type>
      <derivation>
        <Number value="0"/>
      </derivation>
    </Attribute>


    <!--  
      Security identifier. Used to determine if an advice item is viewable by a user.
    -->
    <Attribute name="sid">
      <type>
        <javaclass name="String"/>
      </type>
      <derivation>
        <String value=""/>
      </derivation>
    </Attribute>


  </Class>


  <!--
    Subclasses of Abstract Link should be created and referenced as attributes
    on the concrete subclass of AbstractAdviceItem. Each Link must correspond
    to a place holder in the Advice Text of the same name.

    Links generally require parameters in order to link to the correct page.

    Any Parameters required for the link should be added to the subclass as
    attributes. The type of the attributes should be one of the subclasses
    of Parameter, e.g. NumberParameter, StringParameter or DateParameter.
  -->
  <Class abstract="true" name="AbstractLink">


    <Attribute name="description">
      <type>
        <javaclass name="curam.creole.value.Message"/>
      </type>
      <derivation>
        <ResourceMessage key="CoreAdvisorRuleSet.abstractLink" resourceBundle="curam.advisor.rules.AdvisorRules">
        </ResourceMessage>
      </derivation>
    </Attribute>


    <!--
      A Link is to a page in the application. Subclasses should override this attribute
      to specify the page to link to.
     -->
    <Attribute name="target">
      <type>
        <javaclass name="String"/>
      </type>
      <derivation>
        <abstract/>
      </derivation>
    </Attribute>


    <!--
      Links can be opened as a modal dialog. If this link should be opened as a modal
      dialog then this attribute should be overridden to provide a value of true. If
      this link should be opened in the main content pane then a value of false should
      be provided.
     -->
    <Attribute name="modal">
      <type>
        <javaclass name="Boolean"/>
      </type>
      <derivation>
        <abstract/>
      </derivation>
    </Attribute>


    <!--
      The link can be an internal link or an external link . If this link should be opened as an external
      link then this attribute should be overridden to provide a value of true. If
      this link should be opened as an internal link then a value of false should
      be provided.An external link means a link outside the curam application and is not a UIM.
    -->
    <Attribute name="external">
      <type>
        <javaclass name="Boolean"/>
      </type>
      <derivation>
        <abstract/>
      </derivation>
    </Attribute>


    <!--
      The name of the link used to identify the link in Advice Text.
    -->
    <Attribute name="name">
      <type>
        <javaclass name="String"/>
      </type>
      <derivation>
        <abstract/>
      </derivation>
    </Attribute>


  </Class>


  <Class name="Image">


    <Attribute name="description">
      <type>
        <javaclass name="curam.creole.value.Message"/>
      </type>
      <derivation>
        <ResourceMessage key="CoreAdvisorRuleSet.image" resourceBundle="curam.advisor.rules.AdvisorRules">
        </ResourceMessage>
      </derivation>
    </Attribute>


    <Attribute name="imageID">
      <type>
        <javaclass name="Number"/>
      </type>
      <derivation>
        <specified/>
      </derivation>
    </Attribute>


  </Class>


  <!--
    Base class for all Parameters.
  -->
  <Class abstract="true" name="Parameter">


    <Attribute name="description">
      <type>
        <javaclass name="curam.creole.value.Message"/>
      </type>
      <derivation>
        <ResourceMessage key="CoreAdvisorRuleSet.parameter" resourceBundle="curam.advisor.rules.AdvisorRules">
        </ResourceMessage>
      </derivation>
    </Attribute>


    <!--
      The name of the Parameter. All Parameters regardless of type have names.
     -->
    <Attribute name="name">
      <type>
        <javaclass name="String"/>
      </type>
      <derivation>
        <specified/>
      </derivation>
    </Attribute>


  </Class>


  <!--
    A Parameter that represents a date.
  -->
  <Class abstract="false" extends="Parameter" name="DateParameter">


    <Attribute name="description">
      <type>
        <javaclass name="curam.creole.value.Message"/>
      </type>
      <derivation>
        <ResourceMessage key="CoreAdvisorRuleSet.dateParameter" resourceBundle="curam.advisor.rules.AdvisorRules">
        </ResourceMessage>
      </derivation>
    </Attribute>


    <!--
      The date value of the parameter
     -->
    <Attribute name="value">
      <type>
        <javaclass name="curam.util.type.Date"/>
      </type>
      <derivation>
        <specified/>
      </derivation>
    </Attribute>


  </Class>


  <!--
    A Parameter that represents a string.
  -->
  <Class abstract="false" extends="Parameter" name="StringParameter">


    <Attribute name="description">
      <type>
        <javaclass name="curam.creole.value.Message"/>
      </type>
      <derivation>
        <ResourceMessage key="CoreAdvisorRuleSet.stringParameter" resourceBundle="curam.advisor.rules.AdvisorRules">
        </ResourceMessage>
      </derivation>
    </Attribute>


    <!--
      The string value of the parameter
     -->
    <Attribute name="value">
      <type>
        <javaclass name="String"/>
      </type>
      <derivation>
        <specified/>
      </derivation>
    </Attribute>


  </Class>


  <!--
    A Parameter that represents a Number (e.g. an ID).
  -->
  <Class abstract="false" extends="Parameter" name="NumberParameter">


    <Attribute name="description">
      <type>
        <javaclass name="curam.creole.value.Message"/>
      </type>
      <derivation>
        <ResourceMessage key="CoreAdvisorRuleSet.numberParameter" resourceBundle="curam.advisor.rules.AdvisorRules">
        </ResourceMessage>
      </derivation>
    </Attribute>


    <!--
      The numerical value of the parameter
     -->
    <Attribute name="value">
      <type>
        <javaclass name="Number"/>
      </type>
      <derivation>
        <specified/>
      </derivation>
    </Attribute>


  </Class>


  <!--
    Represents a User Role (Security Role). If a concrete Advice Item contains
    an instance of this class then that piece of Advice will only be available
    to users of that role.
  -->
  <Class abstract="false" name="UserRole">


    <Attribute name="description">
      <type>
        <javaclass name="curam.creole.value.Message"/>
      </type>
      <derivation>
        <ResourceMessage key="CoreAdvisorRuleSet.userRole" resourceBundle="curam.advisor.rules.AdvisorRules">
        </ResourceMessage>
      </derivation>
    </Attribute>


    <!--
      The name of the user role
     -->
    <Attribute name="roleName">
      <type>
        <javaclass name="String"/>
      </type>
      <derivation>
        <specified/>
      </derivation>
    </Attribute>


  </Class>


</RuleSet>